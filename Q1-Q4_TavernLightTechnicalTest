TavernLight Technical Test

Q1:
local function releaseStorage(player, callback)
  player:setStorageValue(1000, -1)
  callback()
end

-- The value of true should be returned after
-- offically logging out. Additionally,
-- waiting for an arbritary amount of time
-- before completing an action should be avoided
function onLogout(player)
  if player:getStorageValue(1000) == 1 then
    local callback;
    callback = (function() return true end)
    releaseStorage(player, callback)
  end
end


Q2:
function printSmallGuildNames(memberCount)
  -- this method is supposed to print names of all guilds that 
  -- have less than memberCount max members
  local selectGuildQuery = "SELECT name FROM guilds WHERE max_members < %d;"
  local resultId = db.storeQuery(string.format(selectGuildQuery, memberCount))
  
  -- check if query result is valid before trying to print result
  if resultId == nil or resultId == '' then
    print("No guilds found with less than "..memberCount.." members.")
  else
    repeat 
      -- repeatedly go through the query results so that all
      -- guilds that meet the criteria are printed, not just
      -- the first one found.
      local guildName = result.getString(resultId, "name")
      print(guildName)
      resultId = db.storeQueryNext(resultId)
      
      until not resultId
  end
end


Q3: 
-- renming the function so its purpose is more clear
function removeMemberFromPlayerParty(playerId, membername)
  player = Player(playerId)
  local party = player:getParty()
  
  -- if there is no party, exit early to prevent
  -- unecessary looping
  if party == nil then return end

  for k,v in pairs(party:getMembers()) do
    if v == Player(membername) then
      -- Since this function removes a singular 
      -- player, once we find the player, the 
      -- function can stop executing
      party:removeMember(Player(membername))
      return
    end
  end
  
  -- if player is not found, print debug message
  print("Cannot find Player "..membername.." in party.")
end

Q4:
void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId)
{
    Player* player = g_game.getPlayerByName(recipient);
    bool playerCreated = false;

    if (!player) {
        player = new Player(nullptr);
        if (!IOLoginData::loadPlayerByName(player, recipient)) {
            // Remember to deallocate the memory when creating
            // new object in C++
            delete player;
            return;
        }
        playerCreated = true;
    }

    Item* item = Item::CreateItem(itemId);
    if (!item) {
        if (playerCreated) {
            // Remember to deallocate the memory when creating
            // new object in C++
            delete player; 
        }
        return;
    }

    g_game.internalAddItem(player->getInbox(), item, INDEX_WHEREEVER, FLAG_NOLIMIT);

    if (player->isOffline()) {
        IOLoginData::savePlayer(player);
    }

    if (playerCreated) {
        // One last call to deallocate once we leave the function.
        delete player; 
    }
}